What does this game do?

*The computer selects a random number from 1-10
*It blinks out the number with that amount of flashes
*The user must input the number in binary: two clicks for one click for zero
*If the user is correct, it flashes rapidly 20 times
*If incorrect, it flashes three times
*The user enters the first number after the light flashes 20x
*Then, the light will flash twice to indicate that it is ready for the next imput
*Each imput will be a character, that will be put in an array
*Then convert that binary character to decimal to find out if the guess was correct

#include "stm32f4xx_hal.h"
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include "guess.h"

#define LED_GPIO_PORT GPIOA
#define LED_PIN GPIO_PIN_5

#define BUTTON_GPIO_PORT GPIOC
#define BUTTON_PIN GPIO_PIN_13

const int standard_time = 250;

// const char binary_numbers[10][2][11] = {
//   {"00000000", '0'},
//   {"00000001", '1'},
//   {"00000010", '2'},
//   {"00000011", '3'},
//   {"00000100", '4'},
//   {"00000101", '5'},
//   {"00000110", '6'},
//   {"00000111", '7'},
//   {"00001000", '8'},
//   {"00001001", '9'},
// };

//these functions make the LED blink
void start_game();
void lose();
void win();
void flash_number(int computer_select);

//records the user's guess (their number)
char get_guess();

int count_clicks();

//use to control how long a toggle will last before switching
void delay(int time);

//get the computer's number 
int get_random (int time);

int main();

///////////////////////////
//FUNCTION DECLARATIONS //
/////////////////////////

void start_game () {
    for(int i = 0 ; i < 40; i++){
        HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
        HAL_Delay(50); 
    }
    delay(5000);
}

//flash three times if wrong
void lose() {
    for(int i = 0 ; i < 6; i++){
        HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
        HAL_Delay(120); 
    }
    delay(1000);
}

void next_input_please() {
    for(int i = 0 ; i < 4; i++){
        HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
        HAL_Delay(120); 
    }
    delay(1000);
}

void win(){
    for(int i = 0 ; i < 40; i++){
        HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
        HAL_Delay(50); 
    }
}

void flash_number (int computer_select) {
    for (int i = 0; i < computer_select; i++) {
        //on
        HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
        delay(standard_time);

        //off
        HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
        delay(standard_time);
    }
    delay(5000);
}

char get_guess(){
    //If the user clicks twice, it's 1, if the user clicks once, it's 0
    int guess = 0;
    
    int clicks = count_clicks();

    if (clicks == 2) {
        guess = '1';
    } else if (clicks == 1) {
        guess = '0';
    }

    return guess;
}


//function to count clicks when the button is clicked
int count_clicks(){
    //start the amount of clicks at 0
    int counter = 0;
    //store the current time
    int time_click = HAL_GetTick();

    while (true){
        //while the button is not clicked
        while(HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN)){
            //while true, the button has not been pressed
            //if it's pressed, we exit out of the inside while loop
            //check if the time since the last click is over 1.5s
            if((HAL_GetTick() - time_click) > 1500){
                // HAL_GetTick() is the time since the start
                //time_click is the time since you last clicked the button
                //return the amount of clicks
                return counter;
            }
        }
        //once the button is clicked, increase the amount of clicks
        counter++;
        //set the time that the button is clicked
        time_click = HAL_GetTick();
        //wait until the button is not clicked
        while(!HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN));
        
    }

}


void delay(int time){
    //function to delay (used for on/off for morse code)
    //use instead of normal delay function so it can be broken if the button is clicked
    int counter = 0;
    
    //repeat until the delay is finished (counter = time) or the button is clicked
    while(counter < time && HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN)){
        //increase counter by one and delay 1 ms
        counter+=1;
        HAL_Delay(1);
    }
}

void SysTick_Handler(void)
{
    HAL_IncTick();
    //every millisecond increases the code by one tick to check the time since the program began
}


int get_random (int time) {
    //the computer picks a random number from 1-10
    srand(time);
    
    int max = 5;

    int random_number = (rand() % max);

    if (random_number == 0) {
        get_random(HAL_GetTick());
    }

    return random_number;
}

int main () {
    HAL_Init();

    SerialSetup(9600);

    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();

    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = LED_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;

    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET);

    //try with just one if it bugs
    while(HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN));
    while(HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN));

    start_game();

    int random_number = get_random (HAL_GetTick());
    char buff[100];
    sprintf(buff, "The random number is: %d\r\n", random_number);
    SerialPuts(buff);

    flash_number(random_number);

    next_input_please();
    char num1 = get_guess();
    next_input_please();
    char num2 = get_guess();
    next_input_please();
    char num3 = get_guess();
    next_input_please();
    char num4 = get_guess();
    next_input_please();
    char num5 = get_guess();
    next_input_please();
    char num6 = get_guess();
    next_input_please();
    char num7 = get_guess();
    next_input_please();
    char num8 = get_guess();

    

    // int player_guess_bin [8] = {num1,num2,num3,num4,num5,num6,num7,num8};

    // int guess_zero [8] = {0,0,0,0,0,0,0,0};
    // int guess_one [8] = {0,0,0,0,0,0,0,1};
    // int guess_two [8] = {0,0,0,0,0,0,1,0};
    // int guess_three [8] = {0,0,0,0,0,0,1,1};
    // int guess_four [8]= {0,0,0,0,0,1,0,0};
    // int guess_five [8]= {0,0,0,0,0,1,0,1};
    // char guess_zero [8] = "00000000";
    // char guess_one [8] = "00000001";
    // char guess_two [8] = "00000010";
    // char guess_three [8] = "00000011";
    // char guess_four [8]= "00000100";
    // char guess_five [8]= "00000101";


    

    int player_guess_dec = 0;

    if (num1 == '0' && num2 == '0' && num3 == '0' && num4 == '0' 
        && num5 == '0' && num6 == '0' && num7 == '0' && num8 == '0') {
        player_guess_dec = 0;
    } else if (num1 == '0' && num2 == '0' && num3 == '0' && num4 == '0' 
        && num5 == '0' && num6 == '0' && num7 == '0' && num8 == '1') {
        player_guess_dec = 1;
    } else if (num1 == '0' && num2 == '0' && num3 == '0' && num4 == '0' 
        && num5 == '0' && num6 == '0' && num7 == '1' && num8 == '0') {
        player_guess_dec = 2;
    } else if (num1 == '0' && num2 == '0' && num3 == '0' && num4 == '0' 
        && num5 == '0' && num6 == '0' && num7 == '1' && num8 == '1') {
        player_guess_dec = 3;
    } else if (num1 == '0' && num2 == '0' && num3 == '0' && num4 == '0' 
        && num5 == '0' && num6 == '1' && num7 == '0' && num8 == '0') {
        player_guess_dec = 4;
    } else if (num1 == '0' && num2 == '0' && num3 == '0' && num4 == '0' 
        && num5 == '0' && num6 == '1' && num7 == '0' && num8 == '1') {
        player_guess_dec = 5;
    }

    char buff3[100];
    sprintf(buff3, "The user guess is: %d\r\n", player_guess_dec);
    SerialPuts(buff3);

    if (random_number == player_guess_dec) {
        win();
    } else {
        lose();
    }